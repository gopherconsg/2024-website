[[schedule]]
id = "dave-cheney"
title = "Starting and stopping things"
description = """In Go it‚Äôs trivia to start a goroutine, but, as I‚Äôm fond of saying, do you know when that goroutine will stop? How will it stop it? How will you know when it has stopped?

This is a talk about a solution I find myself rewriting on pretty much every backend Go service I work on. Even in a microservice shop, the requirement to set up a bunch of parallel goroutines is ubiquitous. 

This is a story about concurrency vs parallelism, the places where it exists today in the std lib and where it does not, the patterns that evolve from that statement, and an introduction to the group type, an idea which has evolved since the Juju days a decade ago of William Reade‚Äôs Manifold, through Peter Bourgon‚Äôs ‚ÄúHow I do things‚Äù talk, and through many of my own iterations."""
speaker = "Dave Cheney"
speakerLink = "/speakers#dave-cheney"

[[schedule]]
id = "adrian-cole"
title = "Practical GenAI with Go"
description = """Learn how to practice Generative AI in Golang, using some popular tools written in Golang. You‚Äôll learn the lingo needed commonly used, like LLM, GenAI, RAG and VectorDB and what they mean. You‚Äôll leave with some ideas on how to start coding, now, with a model hosted on your laptop!"""
speaker = "Adrian Cole"
speakerLink = "/speakers#adrian-cole"

[[schedule]]
id = "axel-wagner"
title = "Why we can't have nice things: Generic methods"
description = """Generic methods would allow us to write chaining APIs. This is particularly important for functional iterator patterns, which currently have to stretch over multiple lines, or be awkwardly nested. It would also allow us to properly attach generic code to the type it belongs to. An example is `func N[T constraints.Integer](n N) N` in package `rand`: It makes it easier to choose a random `time.Duration`, for example. But it should really be a method on `*rand.Rand`.

So no one really contests that it would be useful to have this feature. Even the Go team largely agrees. But the omission was intentional. The reasons for it stretch all the way back, to even before Go‚Äôs first open source release. In fact, it might be the reason we even got generics at all.

I walk through the uses of this feature, the reasons adding generics took so long and how they lead to this omission."""
speaker = "Axel Wagner"
speakerLink = "/speakers#axel-wagner"

[[schedule]]
id = "ben-boyter"
title = "üöÄ The Power of Bloom Filters: Building a Cutting-Edge Go Search Engine to Explore the World's Source Code"
description = """Learn how to use the humble bloom filter and Go to search the worlds source code! Discover how http://searchcode.com uses both to provide blazing fast search over 75 billion lines of code across 40 million projects by uniquely combining trigrams and bloom filters, all on a single dedicated machine."""
speaker = "Ben Boyter"
speakerLink = "/speakers#ben-boyter"

[[schedule]]
id = "charles-korn-jon-kartago-lamida"
title = "80% faster, 70% less memory: the Go tricks we've used to build a high-performance, low-cost Prometheus query engine"
description = """We‚Äôve been building a brand-new, Prometheus-compatible query engine from the ground up for Grafana Mimir in Go.

Our new query engine has been designed to deliver an improved user experience and vastly improved performance: our benchmarks show queries running up to 80% faster and with 70% lower peak memory consumption than Prometheus‚Äô default engine, and our real-world testing shows similar results.

As we‚Äôve been building the engine, we‚Äôve learnt a number of Go performance lessons the hard way, including why using byte slices can sometimes be preferable to strings, the benefits and costs of memory pooling and the surprisingly large impact of function pointers. And we‚Äôve seen the complexity (and bugs!) these things can introduce too, and developed a number of techniques to help combat this."""
speaker = "Charles Korn and Jon Kartago Lamida"
speakerLink = "/speakers#charles-korn"

[[schedule]]
id = "manuel-de-la-pena"
title = "Testing GenAI applications in Go"
description = """The evolution of GenAI applications brings with it the challenge of developing testing methods that can effectively evaluate the complexity and subtlety of responses generated by advanced artificial intelligences.

The proposal to use an LLM as a Validator Agent represents a promising approach, paving the way towards a new era of software development and evaluation in the field of artificial intelligence. Over time, we hope to see more innovations that allow us to overcome the current challenges and maximize the potential of these transformative technologies.

This proposal involves defining detailed validation criteria and using an LLM as an ‚ÄúEvaluator‚Äù to determine if the responses meet the specified requirements. This approach can be applied to validate answers to specific questions, drawing on both general knowledge and especialised information. By incorporating detailed instructions and examples, an Evaluator can provide accurate and justified evaluations, offering clarity on why a response is considered correct or incorrect.

In this session we‚Äôll leverage langchaingo to interact with LLMs, and Testcontainers Go to provision the runtime dependencies to use RAG."""
speaker = "Manuel de la Pe√±a"
speakerLink = "/speakers#manuel-de-la-pena"

